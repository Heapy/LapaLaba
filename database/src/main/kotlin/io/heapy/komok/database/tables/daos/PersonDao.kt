/*
 * This file is generated by jOOQ.
 */
package io.heapy.komok.database.tables.daos


import io.heapy.komok.database.tables.Person
import io.heapy.komok.database.tables.records.PersonRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PersonDao(configuration: Configuration?) : DAOImpl<PersonRecord, io.heapy.komok.database.tables.pojos.Person, Long>(Person.PERSON, io.heapy.komok.database.tables.pojos.Person::class.java, configuration) {

    /**
     * Create a new PersonDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: io.heapy.komok.database.tables.pojos.Person): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<io.heapy.komok.database.tables.pojos.Person> = fetchRange(Person.PERSON.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<io.heapy.komok.database.tables.pojos.Person> = fetch(Person.PERSON.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): io.heapy.komok.database.tables.pojos.Person? = fetchOne(Person.PERSON.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<io.heapy.komok.database.tables.pojos.Person> = fetchRange(Person.PERSON.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<io.heapy.komok.database.tables.pojos.Person> = fetch(Person.PERSON.NAME, *values)

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAge(lowerInclusive: Int, upperInclusive: Int): List<io.heapy.komok.database.tables.pojos.Person> = fetchRange(Person.PERSON.AGE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    fun fetchByAge(vararg values: Int): List<io.heapy.komok.database.tables.pojos.Person> = fetch(Person.PERSON.AGE, *values.toTypedArray())
}
