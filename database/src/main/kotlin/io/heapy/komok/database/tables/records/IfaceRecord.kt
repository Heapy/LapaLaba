/*
 * This file is generated by jOOQ.
 */
package io.heapy.komok.database.tables.records


import io.heapy.komok.database.tables.Iface
import io.heapy.komok.database.tables.interfaces.IIface

import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class IfaceRecord private constructor() : UpdatableRecordImpl<IfaceRecord>(Iface.IFACE), IIface {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open override var schema: JSONB?
        set(value): Unit = set(2, value)
        get(): JSONB? = get(2) as JSONB?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IIface) {
        this.id = from.id
        this.name = from.name
        this.schema = from.schema
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised IfaceRecord
     */
    constructor(id: Long? = null, name: String, schema: JSONB? = null): this() {
        this.id = id
        this.name = name
        this.schema = schema
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised IfaceRecord
     */
    constructor(value: io.heapy.komok.database.tables.pojos.Iface?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.schema = value.schema
            resetChangedOnNotNull()
        }
    }
}
