/*
 * This file is generated by jOOQ.
 */
package io.heapy.komok.database.tables.records


import io.heapy.komok.database.tables.Person
import io.heapy.komok.database.tables.interfaces.IPerson

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PersonRecord private constructor() : UpdatableRecordImpl<PersonRecord>(Person.PERSON), IPerson {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open override var age: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IPerson) {
        this.id = from.id
        this.name = from.name
        this.age = from.age
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PersonRecord
     */
    constructor(id: Long? = null, name: String, age: Int): this() {
        this.id = id
        this.name = name
        this.age = age
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PersonRecord
     */
    constructor(value: io.heapy.komok.database.tables.pojos.Person?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.age = value.age
            resetChangedOnNotNull()
        }
    }
}
